public class HeapMin {
  private int maxsize=10;
  private int size=0;
  int[] items= new int[maxsize];
  private int getLeftChildInd( int parentInd) {return 2*parentInd+1;}
  private int getRightChildInd( int parentInd) {return 2*parentInd+2;}
  private int getParentInd(int childIndex){return (childIndex-1)/2;}

private boolean hasLeftChild(int index){ return getLeftChildInd(index)<size;}
private boolean hasRightChild(int index){ return getRightChildInd(index)<size;}
private boolean hasPatent(int index){return getParentInd(index)>=0;}

private int leftChild(int index){return items[getLeftChildInd(index)];}
private int rightChild(int index){return items[getRightChildInd(index)];}
private int parent(int index){return items[getParentInd(index)];}

private void swap(int indexOne, int indexTwo)
{
int temp=items[indexOne];
items[indexOne]=items[indexTwo];
items[indexTwo]=temp;
}
private void addDouble(){
if(size==maxsize)
{items=Arrays.copyOf(items, maxsize*2);
maxsize*=2;
}
public int peek()
{
if(size==0) throw new IllegalStateException();
return items[0];
}
public int poll()
{
if(size==0) throw new IllegalStateException();
int item=items[0];
items[0]=items[size-1];
size--;
heapifyDown();
return item;
}
public void add(int item)
{
addDouble();
items[size]=item;
size++;
heapifyUp();
}
public void heapifyUp()
{
int index=size-1;
while(hasParent(index)&&parent(index)>items[index]){
swap(getParentInd(index), index);
index=getParentIndex(index);
}
}
public void heapifyDown()
{
int index=0;
while(hasLeftChild(index)){
int smallerChildIndex=getLeftChildIndex(index);
if(hasRightChild(index))&&rightChild(index)<leftChild(index)){
smallerChildIndex=getRightChildIndex(index);
}
if(items[index]<items[smallerChildIndex]){
break;
}
else {swap(index, smallerChildIndex);}
index=smallerChildIndex;
}
}
